// Code generated by MockGen. DO NOT EDIT.
// Source: vk_quests/internal/repository/quest (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository.go -package=mr -mock_names=Repository=QuestRepository . Repository
//

// Package mr is a generated GoMock package.
package mr

import (
	reflect "reflect"
	types "vk_quests/internal/pkg/types"
	quest "vk_quests/internal/repository/quest"

	gomock "go.uber.org/mock/gomock"
)

// QuestRepository is a mock of Repository interface.
type QuestRepository struct {
	ctrl     *gomock.Controller
	recorder *QuestRepositoryMockRecorder
}

// QuestRepositoryMockRecorder is the mock recorder for QuestRepository.
type QuestRepositoryMockRecorder struct {
	mock *QuestRepository
}

// NewQuestRepository creates a new mock instance.
func NewQuestRepository(ctrl *gomock.Controller) *QuestRepository {
	mock := &QuestRepository{ctrl: ctrl}
	mock.recorder = &QuestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *QuestRepository) EXPECT() *QuestRepositoryMockRecorder {
	return m.recorder
}

// CreateQuest mocks base method.
func (m *QuestRepository) CreateQuest(arg0 *quest.Quest) (*quest.Quest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuest", arg0)
	ret0, _ := ret[0].(*quest.Quest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuest indicates an expected call of CreateQuest.
func (mr *QuestRepositoryMockRecorder) CreateQuest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuest", reflect.TypeOf((*QuestRepository)(nil).CreateQuest), arg0)
}

// DeleteQuest mocks base method.
func (m *QuestRepository) DeleteQuest(arg0 types.Id) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuest indicates an expected call of DeleteQuest.
func (mr *QuestRepositoryMockRecorder) DeleteQuest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuest", reflect.TypeOf((*QuestRepository)(nil).DeleteQuest), arg0)
}

// GetQuest mocks base method.
func (m *QuestRepository) GetQuest(arg0 types.Id) (*quest.Quest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuest", arg0)
	ret0, _ := ret[0].(*quest.Quest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuest indicates an expected call of GetQuest.
func (mr *QuestRepositoryMockRecorder) GetQuest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuest", reflect.TypeOf((*QuestRepository)(nil).GetQuest), arg0)
}

// GetQuests mocks base method.
func (m *QuestRepository) GetQuests() ([]quest.Quest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuests")
	ret0, _ := ret[0].([]quest.Quest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuests indicates an expected call of GetQuests.
func (mr *QuestRepositoryMockRecorder) GetQuests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuests", reflect.TypeOf((*QuestRepository)(nil).GetQuests))
}

// UpdateQuest mocks base method.
func (m *QuestRepository) UpdateQuest(arg0 *quest.UpdateQuest) (*quest.Quest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuest", arg0)
	ret0, _ := ret[0].(*quest.Quest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuest indicates an expected call of UpdateQuest.
func (mr *QuestRepositoryMockRecorder) UpdateQuest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuest", reflect.TypeOf((*QuestRepository)(nil).UpdateQuest), arg0)
}
