// Code generated by MockGen. DO NOT EDIT.
// Source: vk_quests/internal/usecase/user (interfaces: Usecase)
//
// Generated by this command:
//
//	mockgen -destination=mocks/usecase.go -package=mu -mock_names=Usecase=UserUsecase . Usecase
//

// Package mu is a generated GoMock package.
package mu

import (
	reflect "reflect"
	types "vk_quests/internal/pkg/types"
	user "vk_quests/internal/usecase/user"

	gomock "go.uber.org/mock/gomock"
)

// UserUsecase is a mock of Usecase interface.
type UserUsecase struct {
	ctrl     *gomock.Controller
	recorder *UserUsecaseMockRecorder
}

// UserUsecaseMockRecorder is the mock recorder for UserUsecase.
type UserUsecaseMockRecorder struct {
	mock *UserUsecase
}

// NewUserUsecase creates a new mock instance.
func NewUserUsecase(ctrl *gomock.Controller) *UserUsecase {
	mock := &UserUsecase{ctrl: ctrl}
	mock.recorder = &UserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UserUsecase) EXPECT() *UserUsecaseMockRecorder {
	return m.recorder
}

// ApplyQuests mocks base method.
func (m *UserUsecase) ApplyQuests(arg0, arg1 types.Id) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyQuests", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyQuests indicates an expected call of ApplyQuests.
func (mr *UserUsecaseMockRecorder) ApplyQuests(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyQuests", reflect.TypeOf((*UserUsecase)(nil).ApplyQuests), arg0, arg1)
}

// CreateUser mocks base method.
func (m *UserUsecase) CreateUser(arg0 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *UserUsecaseMockRecorder) CreateUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*UserUsecase)(nil).CreateUser), arg0)
}

// DeleteUser mocks base method.
func (m *UserUsecase) DeleteUser(arg0 types.Id) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *UserUsecaseMockRecorder) DeleteUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*UserUsecase)(nil).DeleteUser), arg0)
}

// GetUserHistory mocks base method.
func (m *UserUsecase) GetUserHistory(arg0 types.Id) ([]user.HistoryRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHistory", arg0)
	ret0, _ := ret[0].([]user.HistoryRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHistory indicates an expected call of GetUserHistory.
func (mr *UserUsecaseMockRecorder) GetUserHistory(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHistory", reflect.TypeOf((*UserUsecase)(nil).GetUserHistory), arg0)
}

// GetUsers mocks base method.
func (m *UserUsecase) GetUsers() ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *UserUsecaseMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*UserUsecase)(nil).GetUsers))
}

// UpdateUser mocks base method.
func (m *UserUsecase) UpdateUser(arg0 types.Id, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *UserUsecaseMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*UserUsecase)(nil).UpdateUser), arg0, arg1)
}
